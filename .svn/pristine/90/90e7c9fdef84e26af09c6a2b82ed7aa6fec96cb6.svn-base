using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace VisionPlatform
{
    public partial class FormCircle : Form
    {
        public CircleParam m_circleParam = new CircleParam();

        public FormCircle()
        {
            InitializeComponent();
        }

        public void LoadParam(CircleParam globalData)
        {
            try
            {
                m_circleParam = globalData;
                textBox_MeasureLen1.Text = globalData.EPMeasure.nMeasureLen1.ToString();
                textBox_MeasureLen2.Text = globalData.EPMeasure.nMeasureLen2.ToString();
                //边缘极性
                string strTrans = globalData.EPMeasure.strTransition;
                if ("positive" == strTrans)
                    comboBox_Trans.SelectedIndex = 0;
                else if ("negative" == strTrans)
                    comboBox_Trans.SelectedIndex = 1;
                //边缘选择
                string strSel = globalData.EPMeasure.strSelect;
                if ("first" == strSel)
                    comboBox_Select.SelectedIndex = 0;
                else if ("last" == globalData.EPMeasure.strSelect)
                    comboBox_Select.SelectedIndex = 1;
                //阈值
                trackBar_Thd.Value = globalData.EPMeasure.nMeasureThd;
                label_Thd.Text = globalData.EPMeasure.nMeasureThd.ToString();

                Function.m_circle = globalData.circleIn;
            }
            catch (System.Exception ex)
            {
               // ErrorPrinter.WriteLine(string.Format("圆模板参数加载出错！错误信息：{0}", ex.Message), ETraceDisplay.LISTBOX);
                return;
            }
        }
        public CircleParam InitParam()
        {
            CircleParam param = new CircleParam();
            try
            {
                //检测框宽
                if ("" != textBox_MeasureLen1.Text && "0" != textBox_MeasureLen1.Text)
                {
                    param.EPMeasure.nMeasureLen1 = int.Parse(textBox_MeasureLen1.Text);
                }
                else
                    textBox_MeasureLen1.Text = "15";
                //检测框长
                if ("" != textBox_MeasureLen2.Text && "0" != textBox_MeasureLen1.Text)
                {
                    param.EPMeasure.nMeasureLen2 = int.Parse(textBox_MeasureLen2.Text);
                }
                else
                    textBox_MeasureLen2.Text = "3";
                //边缘极性
                int nTrans = comboBox_Trans.SelectedIndex;
                switch (nTrans)
                {
                    case 0:
                        param.EPMeasure.strTransition = "positive";
                        break;
                    case 1:
                        param.EPMeasure.strTransition = "negative";
                        break;
                    default:
                        comboBox_Trans.SelectedIndex = 0;
                        break;
                }
                //边缘选择
                int nSel = comboBox_Select.SelectedIndex;
                switch (nSel)
                {
                    case 0:
                        param.EPMeasure.strSelect = "first";
                        break;
                    case 1:
                        param.EPMeasure.strSelect = "last";
                        break;
                    default:
                        comboBox_Select.SelectedIndex = 0;
                        break;
                }
                //阈值
                if (0 != trackBar_Thd.Value)
                {
                    param.EPMeasure.nMeasureThd = trackBar_Thd.Value;
                    label_Thd.Text = param.EPMeasure.nMeasureThd.ToString();
                }
                else
                {
                    trackBar_Thd.Value = 30;
                    label_Thd.Text = "30";
                }
                param.circleIn = Function.m_circle;
                return param;
            }
            catch (System.Exception ex)
            {
                //ErrorPrinter.WriteLine(string.Format("圆参数初始化错误！错误信息：{0}", ex.Message), ETraceDisplay.LISTBOX);
                return param;
            }
           
        }

        private void trackBar_Thd_Scroll(object sender, EventArgs e)
        {
            if (null == Function.m_hImage)
                return;
            try
            {
                int n = trackBar_Thd.Value;
                label_Thd.Text = n.ToString();
                CircleParam param = InitParam();
                Circle circle = new Circle();
                if (!Function.FitCircle(param, out circle))
                {
                   // DebugPrinter.WriteLine(string.Format("计算圆失败！"), ETraceDisplay.LISTBOX);
                    return;
                }
            }
            catch (System.Exception ex)
            {
            	
            }
        }

        private void FormCircle_Load(object sender, EventArgs e)
        {
            CircleParam param = InitParam();
        }

        private void but_SaveData_Click(object sender, EventArgs e)
        {
            m_circleParam = InitParam();
            Circle circle = new Circle();
            if (Function.FitCircle(m_circleParam, out circle))
            {
                ListViewItem listViewItem = new ListViewItem();
                listViewItem.SubItems.Add(Math.Round(circle.dRow, 5).ToString());
                listViewItem.SubItems.Add(Math.Round(circle.dCol, 5).ToString());
                listViewItem.SubItems.Add(Math.Round(circle.dRadius, 5).ToString());
                this.listView.Items.Add(listViewItem);
                return;
            }
        }

        private void but_ClearData_Click(object sender, EventArgs e)
        {
            listView.Items.Clear();
        }
    }
}
