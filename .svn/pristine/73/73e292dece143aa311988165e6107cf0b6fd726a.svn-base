using AutoMapper;
using System.Collections;
using System.Collections.Generic;
using System.Data;

namespace St.Vision.CommonTools
{
    /// <summary>
    ///  AutoMapper扩展帮助类
    ///  todo:下面的方法已经过时
    ///  2019/8/2
    ///  工具类可参考 https://github.com/ldqk/Masuit.Tools
    ///  
    ///  另外一个是 
    ///  https://github.com/Jimmey-Jiang/Common.Utility
    ///  这个里面关于WEB的工具较多
    /// </summary>
    public static class AutoMapperHelper
    {
        /// <summary>
        ///  类型映射
        /// </summary>
        public static T MapTo<T>(this object obj)
        {
            if (obj == null) return default(T);
            Mapper.Reset();
            Mapper.Initialize(c => c.CreateMap(obj.GetType(), typeof(T)));
            return Mapper.Map<T>(obj);
        }
        /// <summary>
        /// 集合列表类型映射
        /// </summary>
        public static List<TDestination> MapToList<TDestination>(this IEnumerable source)
        {
            Mapper.Reset();
            foreach (var first in source)
            {
                var type = first.GetType();
                Mapper.Initialize(c => c.CreateMap(type, typeof(TDestination)));
                break;
            }
            return Mapper.Map<List<TDestination>>(source);
        }
        /// <summary>
        /// 集合列表类型映射
        /// </summary>
        public static List<TDestination> MapToList<TSource, TDestination>(this IEnumerable<TSource> source)
        {
            Mapper.Reset();
            //IEnumerable<T> 类型需要创建元素的映射
            Mapper.Initialize(c => c.CreateMap<TSource, TDestination>());
            return Mapper.Map<List<TDestination>>(source);
        }
        /// <summary>
        /// 类型映射
        /// </summary>
        public static TDestination MapTo<TSource, TDestination>(this TSource source, TDestination destination)
            where TSource : class
            where TDestination : class
        {
            if (source == null) return destination;
            Mapper.Reset();
            Mapper.Initialize(c => c.CreateMap<TSource, TDestination>());
            return Mapper.Map(source, destination);
        }
        /// <summary>
        /// DataReader映射
        /// </summary>
        public static IEnumerable<T> DataReaderMapTo<T>(this IDataReader reader)
        {
            Mapper.Reset();
            Mapper.Initialize(c => c.CreateMap<IDataReader, IEnumerable<T>>());
            return Mapper.Map<IDataReader, IEnumerable<T>>(reader);
        }
    }
}